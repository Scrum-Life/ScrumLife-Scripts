name: .NET Core Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        targetplatform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Path: VideoManager\VideoManager.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: VideoManager\Infrastructure.UnitTests\Infrastructure.UnitTests.csproj   # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Project_Directory: VideoManager\VideoManager.GUI    # Replace with the project directory relative to the solution, i.e. MyWpfApp.Package.
      Project_Path: VideoManager\VideoManager.GUI\VideoManager.GUI.csproj                   # Replace with the path to your project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      SigningCertificate: SLVideoManagerCert.pfx

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.8.0
      with:
        # Optional SDK version to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
        dotnet-version: 3.1.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test ${{env.Test_Project_Path}}
      
    # Restore the application
    - name:  Restore application
      run: dotnet restore $env:Solution_Path /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: dotnet build -c ${{ matrix.configuration }} -o binOutput $env:Project_Path 

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: VideoManager GUI
        path: ${{ env.Project_Directory }}\bin
